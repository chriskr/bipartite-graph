{"version":3,"sources":["types.ts","red-blue.ts","parseRawGraph.ts","github.svg","wiking.svg","logo.svg","Atoms.tsx","Part.tsx","Edges.tsx","ExpandingTextarea.tsx","RedBlueGraph.tsx","index.tsx"],"names":["Color","getConnected","graph","vertex","get","getRedBlueSubgraphs","keys","Array","from","colorMap","Map","length","error","isRedBlueColorable","targetColor","BLUE","has","set","every","connectedVertex","RED","getVisitor","isConnected","Set","values","flat","size","getVerticesCount","r","String","raw","reNode","rePath","reSep","re","RegExp","trim","s","uniq","list","Center","styled","div","logo","H1","h1","wiking","H2","h2","TEXTAREA_PADDING","Textarea","textarea","attrs","spellCheck","TEXTAREA_HEIGHT","TextareaClone","BipartiteGraph","NodeList","ul","cssColor","Node","li","props","nodeColor","Svg","svg","Error","RepoLink","a","github","Part","nodes","color","map","node","index","scaledPoint","x","y","Path","x0","y0","x1","y1","d","Edges","redNodes","blueNodes","redNodesGraph","redNodesIndex","Object","fromEntries","blueNodesIndex","points","flatMap","source","target","height","Math","max","viewBox","width","stroke","strokeWidth","fill","transform","pointsDict","key","ExpandingTextarea","onChange","placeholder","useState","setHeight","textareaClone","useRef","style","borderRadius","padding","ref","event","current","value","targetHeight","scrollHeight","RedBlueGraph","setState","entries","filter","redNodesSet","rawGraph","match","exec","path","split","zip","slice","forEach","parseRawGraph","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a827c09.chunk.js","sourcesContent":["export enum Color {\n  RED = 1,\n  BLUE,\n}\nexport type Vertex = string;\nexport type Graph = Map<Vertex, Vertex[]>;\nexport type ColorMap = Map<Vertex, Color>;\n","import { Graph, Vertex, ColorMap, Color } from './types';\n\nconst getConnected = (graph: Graph, vertex: Vertex): Vertex[] =>\n  graph.get(vertex) || [];\n\nconst getVerticesCount = (graph: Graph) =>\n  new Set([...Array.from(graph.keys()), ...Array.from(graph.values()).flat()])\n    .size;\n\nconst getVisitor = (graph: Graph, colorMap: ColorMap) => {\n  const isRedBlueColorable = (\n    vertex: Vertex,\n    targetColor: Color = Color.BLUE\n  ): boolean => {\n    if (colorMap.has(vertex)) return colorMap.get(vertex) === targetColor;\n\n    colorMap.set(vertex, targetColor);\n\n    return getConnected(graph, vertex).every((connectedVertex) =>\n      isRedBlueColorable(\n        connectedVertex,\n        targetColor === Color.BLUE ? Color.RED : Color.BLUE\n      )\n    );\n  };\n  return isRedBlueColorable;\n};\n\nexport const getRedBlueSubgraphs = (graph: Graph) => {\n  const keys = Array.from(graph.keys());\n  const colorMap = new Map<Vertex, Color>();\n  if (keys.length === 0) {\n    return { error: '', colorMap };\n  }\n  const isRedBlueColorable = getVisitor(graph, colorMap)(keys[0], Color.RED);\n  const isConnected = getVerticesCount(graph) === colorMap.size;\n  const error = !isRedBlueColorable\n    ? 'is not red blue colorable'\n    : !isConnected\n    ? 'not connected graph'\n    : '';\n  return { error, colorMap };\n};\n","import { Graph } from \"./types\";\nimport zip from 'lodash/zip';\n\nconst r = String.raw;\nconst reNode = r` *[a-zA-Z0-9]+(?: +[a-zA-Z0-9]+)* *`;\nconst rePath = r`${reNode}(?:-${reNode})+`;\nconst reSep = r`(?:[,\\n]+)`;\nconst re = new RegExp(r`(?:${reSep})?(${rePath})`, 'gy');\nconst trim = (s: string) => s.trim();\nconst uniq = <T>(list: T[]) => Array.from(new Set(list));\n\nexport const parseRawGraph = (rawGraph: string) => {\n  const graph: Graph = new Map();\n  while (true) {\n    const match = re.exec(rawGraph);\n    if (!match) break;\n    const path = match[1].split('-').map(trim);\n    const pairs = zip(path.slice(0, -1), path.slice(1));\n    pairs.forEach(([source, target]) => {\n      graph.set(source!, uniq([...(graph.get(source!) || []), target!]));\n      graph.set(target!, uniq([...(graph.get(target!) || []), source!]));\n    });\n  }\n  return graph;\n};\n","export default __webpack_public_path__ + \"static/media/github.a407ddf3.svg\";","export default __webpack_public_path__ + \"static/media/wiking.3ccb519e.svg\";","export default __webpack_public_path__ + \"static/media/logo.ad446705.svg\";","import styled from 'styled-components';\nimport { Color } from './types';\nimport github from './github.svg';\nimport wiking from './wiking.svg';\nimport logo from './logo.svg';\n\nexport const Center = styled.div`\n  align-items: center;\n  background-image: url(${logo}),\n    linear-gradient(hsl(0, 0%, 95%), hsl(0, 0%, 75%));\n  background-repeat: no-repeat;\n  background-position: center center;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  min-height: 100%;\n  padding: 50px 0;\n  &::after {\n    content: '';\n    flex: 1;\n  }\n`;\n\nexport const H1 = styled.h1`\n  background-image: url(${wiking});\n  background-position: 50% 8px;\n  background-repeat: no-repeat;\n  background-size: 48px;\n  font: inherit;\n  font-size: 48px;\n  margin: 0 0 -12px 0;\n  padding: 80px 0 0 0;\n`;\n\nexport const H2 = styled.h2`\n  font: inherit;\n  font-size: 24px;\n  margin: 48px 0 12px 0;\n  padding: 0;\n`;\n\nexport const placehoderText = `node 1 - node 2 - node 3,\nnode 3 - node 4,\nnode 3 - node 6`;\nexport const TEXTAREA_PADDING = 12;\nexport const TEXTAREA_HEIGHT = 84;\n\nexport const Textarea = styled.textarea.attrs({\n  spellCheck: false,\n})`\n  background-color: hsl(0, 0%, 95%);\n  border-radius: ${TEXTAREA_HEIGHT / 2 + TEXTAREA_PADDING}px;\n  border: 0px solid hsl(0, 0%, 85%);\n  font: inherit;\n  font-size: 24px;\n  height: ${TEXTAREA_HEIGHT}px;\n  overflow: hidden;\n  padding: ${TEXTAREA_PADDING}px 48px;\n  resize: none;\n  width: 300px;\n  &:active,\n  &:focus {\n    outline: none;\n  }\n  ::placeholder {\n    color: hsl(0, 0%, 75%);\n  }\n`;\n\nexport const TextareaClone = styled(Textarea)`\n  position: absolute;\n  pointer-events: none;\n  opacity: 0;\n`;\n\nexport const BipartiteGraph = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const NodeList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst cssColor = {\n  [Color.BLUE]: 'hsl(220, 100%, 70%)',\n  [Color.RED]: 'hsl(15, 100%, 65%)',\n};\n\nexport const Node = styled.li<{ nodeColor: Color }>`\n  background-color: ${(props) => cssColor[props.nodeColor]};\n  border-radius: 16px;\n  color: white;\n  font-size: 24px;\n  height: 32px;\n  line-height: 32px;\n  margin: 0 0 16px 0;\n  padding: 0 16px;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n`;\n\nexport const Svg = styled.svg`\n  margin: 0 -24px;\n`;\n\nexport const Error = styled(H2)`\n  color: red;\n`;\n\nexport const RepoLink = styled.a`\n  display: block;\n  background-image: url(${github});\n  background-repeat: no-repeat;\n  background-position: 0 50%;\n  background-size: 20px;\n  padding-left: 32px;\n  height: 24px;\n  line-height: 24px;\n  margin-top: 48px;\n  text-decoration: none;\n  order: 3;\n  cursor: pointer;\n  color: inherit;\n  &::visited,\n  &:-webkit-any-link {\n    color: inherit;\n  }\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import React from 'react';\nimport { Color } from './types';\nimport { NodeList, Node } from './Atoms';\n\nexport const Part = ({ nodes, color }: { nodes: string[]; color: Color }) => (\n  <NodeList>\n    {nodes.map((node, index) => (\n      <Node key={index} nodeColor={color}>\n        {node}\n      </Node>\n    ))}\n  </NodeList>\n);\n","import React from 'react';\nimport { Graph } from './types';\nimport { Svg } from './Atoms';\n\nconst DELTA_HEIGHT = 48;\nconst SVG_WIDTH = 120;\nconst DELAT_CONTROL_POINT = 0.5;\n\nconst scaledPoint = (x: number, y: number) =>\n  `${x * SVG_WIDTH} ${y * DELTA_HEIGHT}`;\n\nconst Path = ({\n  x0,\n  y0,\n  x1,\n  y1,\n}: {\n  x0: number;\n  y0: number;\n  x1: number;\n  y1: number;\n  key: number;\n}) => {\n  const d = `M ${scaledPoint(x0, y0)} C ${scaledPoint(\n    x0 + DELAT_CONTROL_POINT,\n    y0\n  )} ${scaledPoint(x1 - DELAT_CONTROL_POINT, y1)} ${scaledPoint(x1, y1)}`;\n  return <path d={d} />;\n};\n\nexport const Edges = ({\n  redNodes,\n  blueNodes,\n  redNodesGraph,\n}: {\n  redNodes: string[];\n  blueNodes: string[];\n  redNodesGraph: Graph;\n}) => {\n  const redNodesIndex = Object.fromEntries(\n    redNodes.map((node, index) => [node, index])\n  );\n\n  const blueNodesIndex = Object.fromEntries(\n    blueNodes.map((node, index) => [node, index])\n  );\n\n  const points = Array.from(redNodesGraph).flatMap(([source, targets]) =>\n    targets.map((target) => ({\n      x0: 0,\n      y0: redNodesIndex[source],\n      x1: 1,\n      y1: blueNodesIndex[target],\n    }))\n  );\n\n  const height = Math.max(redNodes.length, blueNodes.length) * DELTA_HEIGHT;\n\n  return (\n    <Svg\n      viewBox={`0 0 ${SVG_WIDTH} ${height}`}\n      width={`${SVG_WIDTH}px`}\n      height={`${height}px`}\n    >\n      <g\n        stroke=\"hsl(0, 0%, 30%)\"\n        strokeWidth=\"1\"\n        fill=\"none\"\n        transform={`translate(0, ${(DELTA_HEIGHT - 16) / 2 - 0.5})`}\n      >\n        {points.map((pointsDict, index) => (\n          <Path {...pointsDict} key={index} />\n        ))}\n      </g>\n    </Svg>\n  );\n};\n","import React, { useRef, useState } from 'react';\nimport {\n  Textarea,\n  TextareaClone,\n  TEXTAREA_PADDING,\n  TEXTAREA_HEIGHT,\n} from './Atoms';\n\nexport const ExpandingTextarea = ({\n  onChange,\n  placeholder,\n}: {\n  onChange: React.ChangeEventHandler<HTMLTextAreaElement>;\n  placeholder: string;\n}) => {\n  const [height, setHeight] = useState<number>(0);\n  const textareaClone = useRef<HTMLTextAreaElement>(null);\n\n  const onChangeInner: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    onChange(event);\n    if (!textareaClone.current) {\n      return;\n    }\n    textareaClone.current.value = event.target.value;\n    const targetHeight =\n      textareaClone.current.scrollHeight - 2 * TEXTAREA_PADDING;\n    if (targetHeight > TEXTAREA_HEIGHT) {\n      if (targetHeight !== height) {\n        setHeight(targetHeight);\n      }\n    } else if (height > 0) {\n      setHeight(0);\n    }\n  };\n\n  const style = height\n    ? {\n        height,\n        borderRadius: height / 2 + TEXTAREA_PADDING,\n        padding: `${TEXTAREA_PADDING}px ${(height + TEXTAREA_PADDING) / 2}px`,\n      }\n    : {};\n\n  return (\n    <>\n      <TextareaClone ref={textareaClone} />\n      <Textarea\n        onChange={onChangeInner}\n        placeholder={placeholder}\n        style={style}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { getRedBlueSubgraphs } from './red-blue';\nimport { Color, ColorMap, Graph } from './types';\nimport { parseRawGraph } from './parseRawGraph';\nimport {\n  Center,\n  H1,\n  H2,\n  Error,\n  BipartiteGraph,\n  placehoderText,\n  RepoLink,\n} from './Atoms';\nimport { Part } from './Part';\nimport { Edges } from './Edges';\nimport { ExpandingTextarea } from './ExpandingTextarea';\n\nconst RedBlueGraph = () => {\n  const [{ graph, error, colorMap }, setState] = useState<{\n    graph: Graph;\n    error: string;\n    colorMap: ColorMap;\n  }>({ graph: new Map(), error: '', colorMap: new Map() });\n\n  const redNodes = Array.from(colorMap.entries())\n    .filter(([, color]) => color === Color.RED)\n    .map(([node]) => node);\n\n  const blueNodes = Array.from(colorMap.entries())\n    .filter(([, color]) => color === Color.BLUE)\n    .map(([node]) => node);\n\n  const redNodesSet = new Set(redNodes);\n\n  const redNodesGraph = new Map(\n    Array.from(graph).filter(([node]) => redNodesSet.has(node))\n  );\n\n  return (\n    <Center>\n      <H1>is it a red blue colorable graph?</H1>\n      <H2>enter some paths</H2>\n      <ExpandingTextarea\n        onChange={(event) => {\n          const graph = parseRawGraph(event.target.value);\n          const { error, colorMap } = getRedBlueSubgraphs(graph);\n          setState({ graph, error, colorMap });\n        }}\n        placeholder={placehoderText}\n      ></ExpandingTextarea>\n      {error && <Error>{error}</Error>}\n      {!error && redNodes.length > 0 && (\n        <>\n          <H2>bipartite graph</H2>\n          <BipartiteGraph>\n            <Part nodes={redNodes} color={Color.RED} />\n            <Edges\n              redNodes={redNodes}\n              blueNodes={blueNodes}\n              redNodesGraph={redNodesGraph}\n            />\n            <Part nodes={blueNodes} color={Color.BLUE} />\n          </BipartiteGraph>\n        </>\n      )}\n      <RepoLink href=\"https://github.com/chriskr/bipartite-graph\">\n        github repo\n      </RepoLink>\n    </Center>\n  );\n};\n\nexport default RedBlueGraph;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RedBlueGraph from './RedBlueGraph';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RedBlueGraph />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}